(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{345:function(t,a,s){"use strict";s.r(a);var e=s(40),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"一、持续集成介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、持续集成介绍"}},[t._v("#")]),t._v(" 一、持续集成介绍")]),t._v(" "),s("blockquote",[s("p",[t._v("持续集成是一种软件开发实践，即团队开发成员经常集成他们的工作，通常每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试)来验证，从而尽快地发现集成错误。许多团队发现这个过程可以大大减少集成的问题，让团队能够更快的开发内聚的软件。—— Martin Fowler")])]),t._v(" "),s("h3",{attrs:{id:"_1-概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-概念"}},[t._v("#")]),t._v(" 1 概念")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("持续集成")]),t._v("("),s("code",[t._v("Continuous Integration")]),t._v(")：**频繁地(一天多次)将代码集成到主干。**让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。“持续集成并不能消除 Bug，而是让它们非常容易发现和改正。”")]),t._v(" "),s("li",[s("strong",[t._v("持续交付")]),t._v("("),s("code",[t._v("Continuous Delivery")]),t._v(")：**频繁地将软件的新版本，交付给质量团队或者用户，以供评审。**如果评审通过，代码就进入生产阶段。持续交付可以看作持续集成的下一步。它强调的是，不管怎么更新，软件是随时随地可以交付的。")]),t._v(" "),s("li",[s("strong",[t._v("持续部署")]),t._v("("),s("code",[t._v("continuous Deployment")]),t._v(")：**代码通过评审以后，自动部署到生产环境。**是持续部署是持续交付的下一步，持续部署的目标是，代码在任何时刻都是可部署的，可以进入生产阶段。")])]),t._v(" "),s("h3",{attrs:{id:"_2-持续集成的好处"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-持续集成的好处"}},[t._v("#")]),t._v(" 2 持续集成的好处")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("自动化构建且状态对每个人可见")]),t._v("。可以使用"),s("code",[t._v("Maven")]),t._v("、"),s("code",[t._v("Gradle")]),t._v("等来实现自动化构建，可以在构建过程中实现自动化测试（前提是有写单元测试用例）。集成服务器在持续集成过程中发现问题可以及时发送警告给相关的干系人。")]),t._v(" "),s("li",[t._v("**解放了重复性劳动。**自动化部署工作可以解放集成、测试、部署等重复性劳动，而机器集成的频率明显比手工高很多。")]),t._v(" "),s("li",[t._v("**更快地发现和修复问题。**持续集成更早的获取变更，更早的进入测试，更早的发现问题，解决问题的成本显著下降。")]),t._v(" "),s("li",[t._v("**更快的交付成果。**更早发现错误减少解决错误所需的工作量。集成服务器在构建环节发现错误可以及时通知开发人员修复。集成服务器在部署环节发现错误可以回退到上一版本，服务器始终有一个可用的版本。")]),t._v(" "),s("li",[t._v("**减少手工的错误。**在重复性动作上，人容易犯错，而机器犯错的几率几乎为零。")]),t._v(" "),s("li",[t._v("**减少了等待时间。**缩短了从开发、集成、测试、部署各个环节的时间，从而也就缩短了中间可以出现的等待时机。持续集成，意味着开发、集成、测试、部署也得以持续。")]),t._v(" "),s("li",[t._v("**更高的产品质量。**集成服务器往往提供代码质量检测等功能，对不规范或有错误的地方会进行标致，也可以设置邮件和短信等进行警告。")])]),t._v(" "),s("h3",{attrs:{id:"_3-常用持续集成工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-常用持续集成工具"}},[t._v("#")]),t._v(" 3 常用持续集成工具")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://jenkins.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Jenkins"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://docs.gitlab.com/ee/ci/README.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitLab CI"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.jetbrains.com/teamcity/",target:"_blank",rel:"noopener noreferrer"}},[t._v("TeamCity"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.travis-ci.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Travis CI"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.atlassian.com/software/bamboo",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bamboo"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://circleci.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("CircleCI"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("...")])]),t._v(" "),s("h2",{attrs:{id:"二、gitlab-持续集成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、gitlab-持续集成"}},[t._v("#")]),t._v(" 二、Gitlab 持续集成")]),t._v(" "),s("p",[t._v("[外链图片转存失败(img-93v8L3VB-1566115077727)(https://docs.gitlab.com/ee/ci/img/cicd_pipeline_infograph.png)]")]),t._v(" "),s("h3",{attrs:{id:"_1-概念介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-概念介绍"}},[t._v("#")]),t._v(" 1 概念介绍")]),t._v(" "),s("h4",{attrs:{id:"_1-gitlab"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-gitlab"}},[t._v("#")]),t._v(" (1) GitLab")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://about.gitlab.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitLab"),s("OutboundLink")],1),t._v(" 是一个利用"),s("code",[t._v("Ruby on Rails")]),t._v("开发的开源应用程序，实现一个自托管的 Git 项目仓库，可通过 Web 界面进行访问公开的或者私人项目。它拥有与"),s("a",{attrs:{href:"https://github.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub"),s("OutboundLink")],1),t._v("类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。")]),t._v(" "),s("h4",{attrs:{id:"_2-gitlab-ci-cd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-gitlab-ci-cd"}},[t._v("#")]),t._v(" (2) GitLab CI/CD")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://docs.gitlab.com/ee/ci/README.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitLab CI/CD"),s("OutboundLink")],1),t._v(" 是"),s("code",[t._v("GitLab Continuous Integration")]),t._v("（Gitlab持续集成）的简称。GitLab 自"),s("code",[t._v("GitLab 8.0")]),t._v("开始提供了持续集成的功能，且对所有项目默认开启。只要在项目仓库的根目录添加"),s("code",[t._v(".gitlab-ci.yml")]),t._v("文件，并且配置了Runner（运行器），那么每一次"),s("code",[t._v("push")]),t._v("或者合并请求（"),s("code",[t._v("Merge Request")]),t._v("）都会触发"),s("a",{attrs:{href:"https://docs.gitlab.com/ce/ci/pipelines.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("CI Pipeline"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("h4",{attrs:{id:"_3-gitlab-runner"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-gitlab-runner"}},[t._v("#")]),t._v(" (3) GitLab Runner")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://docs.gitlab.com/runner/",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitLab Runner"),s("OutboundLink")],1),t._v(" "),s("code",[t._v("GitLab Runner")]),t._v("是一个开源项目，可以运行在 GNU / Linux，macOS 和 Windows 操作系统上。每次"),s("code",[t._v("push")]),t._v("的时候 GitLab CI 会根据"),s("code",[t._v(".gitlab-ci.yml")]),t._v("配置文件运行你流水线（"),s("code",[t._v("Pipeline")]),t._v("）中各个阶段的任务（"),s("code",[t._v("Job")]),t._v("），并将结果发送回 GitLab。GitLab Runner 是基于 Gitlab CI 的 API 进行构建的相互隔离的机器（或虚拟机）。GitLab Runner 不需要和 Gitlab 安装在同一台机器上，且考虑到 GitLab Runner 的资源消耗问题和安全问题，也不建议这两者安装在同一台机器上。")]),t._v(" "),s("p",[t._v("Gitlab Runner 分为三种：")]),t._v(" "),s("ul",[s("li",[t._v("共享Runner("),s("code",[t._v("Shared runners")]),t._v(")")]),t._v(" "),s("li",[t._v("专享Runner("),s("code",[t._v("Specific runners")]),t._v(")")]),t._v(" "),s("li",[t._v("分组Runner("),s("code",[t._v("Group Runners")]),t._v(")")])]),t._v(" "),s("h4",{attrs:{id:"_4-pipelines"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-pipelines"}},[t._v("#")]),t._v(" (4) Pipelines")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://docs.gitlab.com/ce/ci/pipelines.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pipelines"),s("OutboundLink")],1),t._v(" 中文称为流水线，是分阶段执行的构建任务。如：安装依赖、运行测试、打包、部署开发服务器、部署生产服务器等流程。每一次"),s("code",[t._v("push")]),t._v("或者"),s("code",[t._v("Merge Request")]),t._v("都会触发生成一条新的Pipeline。")]),t._v(" "),s("p",[t._v("下面是流水线示例图：")]),t._v(" "),s("p",[t._v("[外链图片转存失败(img-HjJVfv6x-1566115077729)(https://docs.gitlab.com/ce/ci/img/pipelines_index.png)]")]),t._v(" "),s("h4",{attrs:{id:"_5-stages"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-stages"}},[t._v("#")]),t._v(" (5) Stages")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://docs.gitlab.com/ce/ci/yaml/README.html#stages",target:"_blank",rel:"noopener noreferrer"}},[t._v("Stages"),s("OutboundLink")],1),t._v(" 表示构建阶段，可以理解为上面所说“安装依赖”、“运行测试”等环节的流程。我们可以在一次 Pipeline 中定义多个 Stages，这些 Stages 会有以下特点：")]),t._v(" "),s("ul",[s("li",[t._v("所有 Stages 会按照顺序运行，即当一个 Stage 完成后，下一个 Stage 才会开始（当然可以在"),s("code",[t._v(".gitlab-ci.yml")]),t._v("文件中配置上一阶段失败时下一阶段也执行）")]),t._v(" "),s("li",[t._v("只有当所有 Stages 完成后，该构建任务 (Pipeline) 才会成功")]),t._v(" "),s("li",[t._v("如果任何一个 Stage 失败，那么后面的 Stages 不会执行，该构建任务 (Pipeline) 失败")])]),t._v(" "),s("p",[t._v("下面是一个流水线内的阶段任务示例图：")]),t._v(" "),s("p",[t._v("[外链图片转存失败(img-ipwGJWAg-1566115077730)(https://docs.gitlab.com/ce/ci/img/pipelines.png)]")]),t._v(" "),s("h4",{attrs:{id:"_6-jobs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-jobs"}},[t._v("#")]),t._v(" (6) Jobs")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://docs.gitlab.com/ce/ci/pipelines.html#jobs",target:"_blank",rel:"noopener noreferrer"}},[t._v("Jobs"),s("OutboundLink")],1),t._v(" 表示构建的作业（或称之为任务），表示某个 Stage 里面执行的具体任务。我们可以在 Stages 里面定义多个 Jobs，这些 Jobs 会有以下特点：")]),t._v(" "),s("ul",[s("li",[t._v("相同 Stage 中的 Jobs 无执行顺序要求，会并行执行")]),t._v(" "),s("li",[t._v("相同 Stage 中的 Jobs 都执行成功时，该 Stage 才会成功")]),t._v(" "),s("li",[t._v("如果任何一个 Job 失败，那么该 Stage 失败，即该构建任务 (Pipeline) 也失败（可以在"),s("code",[t._v(".gitlab-ci.yml")]),t._v("文件中配置允许某 Job 可以失败，也算该 Stage 成功）")])]),t._v(" "),s("h4",{attrs:{id:"_7-gitlab-ci-yml"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-gitlab-ci-yml"}},[t._v("#")]),t._v(" (7) .gitlab-ci.yml")]),t._v(" "),s("p",[t._v("GitLab 中默认开启了 Gitlab CI/CD 的支持，且使用"),s("a",{attrs:{href:"http://yaml.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("YAML"),s("OutboundLink")],1),t._v("文件"),s("a",{attrs:{href:"https://docs.gitlab.com/ee/ci/yaml/README.html#examples",target:"_blank",rel:"noopener noreferrer"}},[t._v(".gitlab-ci.yml"),s("OutboundLink")],1),t._v("来管理项目构建配置。该文件需要存放于项目仓库的根目录（默认路径，可在 GitLab 中修改），它定义该项目的 CI/CD 如何配置。所以，我们只需要在"),s("code",[t._v(".gitlab-ci.yml")]),t._v("配置文件中定义流水线的各个阶段，以及各个阶段中的若干作业（任务）即可。")]),t._v(" "),s("p",[t._v("下面是"),s("code",[t._v(".gitlab-ci.yml")]),t._v("文件的一个简单的"),s("code",[t._v("Hello World")]),t._v("示例：")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义 test 和 package 两个 Stages")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stages")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" test\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" package\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义 package 阶段的一个 job")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("package-job")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" package\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(' echo "Hello'),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" package"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v('job"\n    '),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(' echo "I am in package stage"\n\n'),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义 test 阶段的一个 job")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("test-job")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" test\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(' echo "Hello'),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" test"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v('job"\n    '),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(' echo "I am in test stage"\n')])])]),s("p",[t._v("以上配置中，用 stages 关键字来定义 Pipeline 中的各个构建阶段，然后用一些非关键字来定义 jobs。每个 job 中可以可以再用 stage 关键字来指定该 job 对应哪个 stage。job 里面的"),s("code",[t._v("script")]),t._v("关键字是每个 job 中必须要包含的，它表示每个 job 要执行的命令。")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("注")]),t._v("：猜猜上面例子的运行结果？")])]),t._v(" "),s("h4",{attrs:{id:"_8-badges"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-badges"}},[t._v("#")]),t._v(" (8) Badges")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://docs.gitlab.com/ce/ci/pipelines.html#badges",target:"_blank",rel:"noopener noreferrer"}},[t._v("Badges"),s("OutboundLink")],1),t._v(" 即："),s("strong",[t._v("徽章")]),t._v("，当 Pipelines 执行过程中或者执行完成时会生成徽章，你可以将这些徽章加入到你的"),s("code",[t._v("README.md")]),t._v("文件中，便于从仓库主页看到最新的构建状态。")]),t._v(" "),s("p",[t._v("徽章的链接形如下：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("http://example.gitlab.com/namespace/project/badges/branch/build.svg \n")])])]),s("p",[t._v("我们用 GitLab 项目的徽章作为例子，效果如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRsYWIuY29tL2dpdGxhYi1vcmcvZ2l0bGFiLWNlL2JhZGdlcy9tYXN0ZXIvYnVpbGQuc3Zn",alt:"Gitlab build badges"}}),t._v(" "),s("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRsYWIuY29tL2dpdGxhYi1vcmcvZ2l0bGFiLWNlL2JhZGdlcy9tYXN0ZXIvY292ZXJhZ2Uuc3Zn",alt:"Gitlab coverage badges"}})]),t._v(" "),s("h3",{attrs:{id:"_2-安装-gitlab-runner"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-安装-gitlab-runner"}},[t._v("#")]),t._v(" 2 安装 GitLab Runner")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://docs.gitlab.com/runner/install/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),s("OutboundLink")],1),t._v("有 GitLab Runner安装相关的资源和文档可供大家参考。以下仅以咱们公司常用的"),s("code",[t._v("Centos")]),t._v("为例来做安装说明。")]),t._v(" "),s("h4",{attrs:{id:"_1-在线安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-在线安装"}},[t._v("#")]),t._v(" (1) 在线安装")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加官方的repo.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bash")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# yum 安装Gtilab Runner.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" yum "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" gitlab-runner\n")])])]),s("h4",{attrs:{id:"_2-离线安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-离线安装"}},[t._v("#")]),t._v(" (2) 离线安装")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 安装Git")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" yum –y "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# rpm离线安装事先下载好的 Gitlab Runner rpm包.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rpm")]),t._v(" -ivh gitlab-runner-10.5.0-1.x86_64.rpm\n")])])]),s("blockquote",[s("p",[s("strong",[t._v("注")]),t._v("：Gitlab Runner 依赖了"),s("code",[t._v("Git")]),t._v("，所以，离线安装 Gitlab Runner 之前得首先安装Git，离线安装包可以从"),s("a",{attrs:{href:"https://packages.gitlab.com/runner/gitlab-runner",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),s("OutboundLink")],1),t._v("下载。")])]),t._v(" "),s("h3",{attrs:{id:"_3-注册-gitlab-runner"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-注册-gitlab-runner"}},[t._v("#")]),t._v(" 3 注册 Gitlab Runner")]),t._v(" "),s("p",[t._v("安装了 GitLab Runner 之后,就可以为 GitLab 中的仓库"),s("a",{attrs:{href:"https://docs.gitlab.com/runner/register/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("注册一个 Runner"),s("OutboundLink")],1),t._v("，注册的交互式命令如下：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" gitlab-runner register\n")])])]),s("p",[t._v("命令的交互式的过程如下：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输入注册命令")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" gitlab-runner register\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输入公司的 GitLab 网站地址")]),t._v("\nPlease enter the gitlab-ci coordinator URL "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e.g. https://gitlab.com "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nhttp://gitlab.xxxx.com/\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 你项目仓库的token，token可以在 Settings -> CI/CD -> Runners settings 中找到.")]),t._v("\nPlease enter the gitlab-ci token "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" this runner\nxxx\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输入描述这个 runner 的名称")]),t._v("\nPlease enter the gitlab-ci description "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" this runner\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("hostame"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" my-runner\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输入 runner 的标签")]),t._v("\nPlease enter the gitlab-ci tags "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" this runner "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("comma separated"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(":\nmy-tag,another-tag\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输入 runner 的执行器.")]),t._v("\nPlease enter the executor: ssh, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, virtualbox, docker-ssh, shell:\nshell\n")])])]),s("p",[t._v("以上流程注册成功之后，就可以在你的项目仓库中 "),s("code",[t._v("Settings")]),t._v(" -> "),s("code",[t._v("CI/CD")]),t._v(" -> "),s("code",[t._v("Runners settings")]),t._v(" 看到这个 Runner 了。")]),t._v(" "),s("h3",{attrs:{id:"_4-gitlab-runner-常用命令汇总"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-gitlab-runner-常用命令汇总"}},[t._v("#")]),t._v(" 4 Gitlab Runner 常用命令汇总")]),t._v(" "),s("p",[t._v("下面的表格中列出了一些常用的"),s("a",{attrs:{href:"https://docs.gitlab.com/runner/commands/README.html#gitlab-runner-list",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gitlab Runner命令"),s("OutboundLink")],1),t._v("，以供参考：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("命令")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("gitlab-runner run")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("运行一个runner服务")])]),t._v(" "),s("tr",[s("td",[t._v("gitlab-runner register")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("注册一个新的runner")])]),t._v(" "),s("tr",[s("td",[t._v("gitlab-runner start")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("启动服务")])]),t._v(" "),s("tr",[s("td",[t._v("gitlab-runner stop")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("关闭服务")])]),t._v(" "),s("tr",[s("td",[t._v("gitlab-runner restart")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("重启服务")])]),t._v(" "),s("tr",[s("td",[t._v("gitlab-runner status")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("查看各个runner的状态")])]),t._v(" "),s("tr",[s("td",[t._v("gitlab-runner unregister")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("注销掉某个runner")])]),t._v(" "),s("tr",[s("td",[t._v("gitlab-runner list")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("显示所有运行着的runner")])]),t._v(" "),s("tr",[s("td",[t._v("gitlab-runner verify")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("检查已注册的运行程序是否可以连接到GitLab，但它不验证GitLab Runner服务是否正在使用运行程序。")])])])]),t._v(" "),s("h2",{attrs:{id:"三、一个web项目-ci-cd-简单示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、一个web项目-ci-cd-简单示例"}},[t._v("#")]),t._v(" 三、一个Web项目 CI/CD 简单示例")]),t._v(" "),s("p",[t._v("接下来，用一个实际项目来演示 GitLab CI/CD 的配置和使用，其中主要包括：编译测试、项目打包、部署服务、Sonar手动检查、Sonar定时检查五个阶段。")]),t._v(" "),s("p",[t._v("下面用一个传统的 Java web 项目(这里称之为"),s("code",[t._v("cidemo")]),t._v(")和"),s("code",[t._v("Tomcat")]),t._v("来作为示例，并用来展示常用配置的使用。当我每次"),s("code",[t._v("push")]),t._v("代码或者"),s("code",[t._v("Merge Request")]),t._v("时，都会生成一条流水线，且会自动执行我们上面所说的一些阶段，而Sonar手动检查我们设置为手动操作，且再额外配置Sonar定时检查的任务。")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("注")]),t._v("：我 Gitlab Runner 是安装在"),s("code",[t._v("Centos")]),t._v("环境中，并使用的"),s("code",[t._v("shell")]),t._v("执行器。")])]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义stages")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stages")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" test\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" install\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" run\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" sonar\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义安装包的存放位置和Tomcat服务器的地址的变量，便于后续部署使用.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("variables")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("CIDEMO_PACKAGE_DIR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/home/gitlab-runner/packages/cidemo/'")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("SERVER_HOME_DIR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/home/gitlab-runner/tomcat/cidemo-tomcat/'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("###################### 构建编译和单元测试的job. #######################")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("编译测试任务")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" test\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("only")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" branches\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" mvn clean test\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("###################### Maven安装得到war包的job. #######################")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("打包任务")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" install\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("only")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" develop\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" mvn install\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" echo '准备将最新的war包复制、保存到某个目录里面供后续使用.'\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" rm "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("rf $CIDEMO_PACKAGE_DIR/"),s("span",{pre:!0,attrs:{class:"token important"}},[t._v("*.war")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" cp target/"),s("span",{pre:!0,attrs:{class:"token important"}},[t._v("*.war")]),t._v(" $CIDEMO_PACKAGE_DIR/cidemo.war\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("####################### 部署运行war包的job. #######################")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("部署运行任务")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" run\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("only")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" develop\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" echo '准备部署和运行war包！(为了方便部署到了Tomcat中运行)'\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" cd $SERVER_HOME_DIR\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" sh bin/shutdown.sh\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" rm "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("rf webapps/cidemo.war\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" cp $CIDEMO_PACKAGE_DIR/cidemo.war $SERVER_HOME_DIR/webapps/cidemo.war\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" nohup sh ./bin/startup.sh "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" logs/cidemo_nohup.log 2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token important"}},[t._v("&1")]),t._v(" &\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("###################### Sonar手动构建的job. #######################")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Sonar手动检查")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" sonar\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("when")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" manual\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("only")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" develop\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" echo '准备对项目代码做sonar的质量检查！'\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" mvn compile "),s("span",{pre:!0,attrs:{class:"token important"}},[t._v("&&")]),t._v(" mvn sonar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("sonar "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("Dsonar.host.url=http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//172.16.34.102"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("9000 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("Dsonar.login=497a0e0e2fc07f64c4b54edc17bb47dfa251ba34\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("###################### Sonar每晚定时构建的job. #######################")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Sonar定时检查")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" sonar\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("only")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" schedules\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" echo '开始定时对项目代码做sonar的质量检查！'\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" mvn compile "),s("span",{pre:!0,attrs:{class:"token important"}},[t._v("&&")]),t._v(" mvn sonar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("sonar "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("Dsonar.host.url=http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//172.16.34.102"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("9000 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("Dsonar.login=497a0e0e2fc07f64c4b54edc17bb47dfa251ba34\n")])])]),s("h2",{attrs:{id:"四、gitlab-ci-cd-yaml-常用配置介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、gitlab-ci-cd-yaml-常用配置介绍"}},[t._v("#")]),t._v(" 四、Gitlab CI/CD yaml 常用配置介绍")]),t._v(" "),s("p",[t._v("开始构建之前"),s("code",[t._v(".gitlab-ci.yml")]),t._v("文件定义了一系列带有约束说明的任务。这些任务都是以任务名开始并且至少要包含script部分，"),s("code",[t._v(".gitlab-ci.yml")]),t._v("允许指定无限量 jobs。每个 jobs 必须有一个唯一的名字，且名字不能是下面列出的保留字段：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("image")])]),t._v(" "),s("li",[s("code",[t._v("services")])]),t._v(" "),s("li",[s("code",[t._v("stages")])]),t._v(" "),s("li",[s("code",[t._v("types")])]),t._v(" "),s("li",[s("code",[t._v("before_script")])]),t._v(" "),s("li",[s("code",[t._v("after_script")])]),t._v(" "),s("li",[s("code",[t._v("variables")])]),t._v(" "),s("li",[s("code",[t._v("cache")])])]),t._v(" "),s("p",[t._v("job由一列参数来定义 jobs 的行为：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Keyword")]),t._v(" "),s("th",[t._v("Required")]),t._v(" "),s("th",[t._v("Description")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("script")]),t._v(" "),s("td",[t._v("yes")]),t._v(" "),s("td",[t._v("Runner执行的命令或脚本")])]),t._v(" "),s("tr",[s("td",[t._v("extends")]),t._v(" "),s("td",[t._v("no")]),t._v(" "),s("td",[t._v("定义此作业将继承的配置条目")])]),t._v(" "),s("tr",[s("td",[t._v("image")]),t._v(" "),s("td",[t._v("no")]),t._v(" "),s("td",[t._v("所使用的docker镜像，查阅"),s("a",{attrs:{href:"https://docs.gitlab.com/ce/ci/docker/using_docker_images.html#define-image-and-services-from-gitlab-ciyml",target:"_blank",rel:"noopener noreferrer"}},[t._v("使用docker镜像"),s("OutboundLink")],1)])]),t._v(" "),s("tr",[s("td",[t._v("services")]),t._v(" "),s("td",[t._v("no")]),t._v(" "),s("td",[t._v("所使用的docker服务，查阅"),s("a",{attrs:{href:"https://docs.gitlab.com/ce/ci/docker/using_docker_images.html#define-image-and-services-from-gitlab-ciyml",target:"_blank",rel:"noopener noreferrer"}},[t._v("使用docker镜像"),s("OutboundLink")],1)])]),t._v(" "),s("tr",[s("td",[t._v("stage")]),t._v(" "),s("td",[t._v("no")]),t._v(" "),s("td",[t._v("定义job stage（默认："),s("code",[t._v("test")]),t._v("）")])]),t._v(" "),s("tr",[s("td",[t._v("type")]),t._v(" "),s("td",[t._v("no")]),t._v(" "),s("td",[s("code",[t._v("stage")]),t._v("的别名（已弃用）")])]),t._v(" "),s("tr",[s("td",[t._v("variables")]),t._v(" "),s("td",[t._v("no")]),t._v(" "),s("td",[t._v("定义job级别的变量")])]),t._v(" "),s("tr",[s("td",[t._v("only")]),t._v(" "),s("td",[t._v("no")]),t._v(" "),s("td",[t._v("定义一列git分支，并为其创建job")])]),t._v(" "),s("tr",[s("td",[t._v("except")]),t._v(" "),s("td",[t._v("no")]),t._v(" "),s("td",[t._v("定义一列git分支，不创建job")])]),t._v(" "),s("tr",[s("td",[t._v("tags")]),t._v(" "),s("td",[t._v("no")]),t._v(" "),s("td",[t._v("定义一列tags，用来指定选择哪个Runner（同时Runner也要设置tags）")])]),t._v(" "),s("tr",[s("td",[t._v("allow_failure")]),t._v(" "),s("td",[t._v("no")]),t._v(" "),s("td",[t._v("允许job失败。失败的job不影响commit状态")])]),t._v(" "),s("tr",[s("td",[t._v("when")]),t._v(" "),s("td",[t._v("no")]),t._v(" "),s("td",[t._v("定义何时开始job。可以是"),s("code",[t._v("on_success")]),t._v("，"),s("code",[t._v("on_failure")]),t._v("，"),s("code",[t._v("always")]),t._v("或者"),s("code",[t._v("manual")])])]),t._v(" "),s("tr",[s("td",[t._v("dependencies")]),t._v(" "),s("td",[t._v("no")]),t._v(" "),s("td",[t._v("定义job依赖关系，这样他们就可以互相传递artifacts")])]),t._v(" "),s("tr",[s("td",[t._v("cache")]),t._v(" "),s("td",[t._v("no")]),t._v(" "),s("td",[t._v("定义应在后续运行之间缓存的文件列表")])]),t._v(" "),s("tr",[s("td",[t._v("before_script")]),t._v(" "),s("td",[t._v("no")]),t._v(" "),s("td",[t._v("重写一组在作业前执行的命令")])]),t._v(" "),s("tr",[s("td",[t._v("after_script")]),t._v(" "),s("td",[t._v("no")]),t._v(" "),s("td",[t._v("重写一组在作业后执行的命令")])]),t._v(" "),s("tr",[s("td",[t._v("environment")]),t._v(" "),s("td",[t._v("no")]),t._v(" "),s("td",[t._v("定义此作业完成部署的环境名称")])]),t._v(" "),s("tr",[s("td",[t._v("coverage")]),t._v(" "),s("td",[t._v("no")]),t._v(" "),s("td",[t._v("定义给定作业的代码覆盖率设置")])]),t._v(" "),s("tr",[s("td",[t._v("etry")]),t._v(" "),s("td",[t._v("no")]),t._v(" "),s("td",[t._v("定义在发生故障时可以自动重试作业的时间和次数")])]),t._v(" "),s("tr",[s("td",[t._v("parallel")]),t._v(" "),s("td",[t._v("no")]),t._v(" "),s("td",[t._v("定义应并行运行的作业实例数")])])])]),t._v(" "),s("h3",{attrs:{id:"extends"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#extends"}},[t._v("#")]),t._v(" extends")]),t._v(" "),s("blockquote",[s("p",[t._v("是在 GitLab 11.3 中引入的。")])]),t._v(" "),s("p",[s("code",[t._v("extends")]),t._v("定义了一个使用"),s("code",[t._v("extends")]),t._v("的作业将继承的条目名称。它是使用"),s("a",{attrs:{href:"https://docs.gitlab.com/ee/ci/yaml/README.html#anchors",target:"_blank",rel:"noopener noreferrer"}},[t._v("YAML锚点"),s("OutboundLink")],1),t._v("的替代方案，并且更加灵活和可读：")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v(".tests")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" rake test\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" test\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("only")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("refs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" branches\n\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("rspec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("extends")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" .tests\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" rake rspec\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("only")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("variables")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" $RSPEC\n")])])]),s("p",[t._v("在上面的示例中，"),s("code",[t._v("rspec")]),t._v("作业继承自"),s("code",[t._v(".tests")]),t._v("模板作业。 GitLab 将根据键执行反向深度合并。 GitLab将：")]),t._v(" "),s("ul",[s("li",[t._v("将"),s("code",[t._v("rspec")]),t._v("内容以递归方式合并到"),s("code",[t._v(".tests")]),t._v("中。")]),t._v(" "),s("li",[t._v("不合并键的值。")])]),t._v(" "),s("p",[t._v("这实际生成的是以下"),s("code",[t._v("rspec")]),t._v("作业：")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("rspec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" rake rspec\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" test\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("only")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("refs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" branches\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("variables")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" $RSPEC\n")])])]),s("blockquote",[s("p",[s("strong",[t._v("注")]),t._v(": "),s("code",[t._v("rake test")]),t._v("已被"),s("code",[t._v("rake rspec")]),t._v("脚本覆盖。")])]),t._v(" "),s("h3",{attrs:{id:"image-和-services"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#image-和-services"}},[t._v("#")]),t._v(" image 和 services")]),t._v(" "),s("p",[t._v("这两个关键字允许使用一个自定义的 Docker 镜像和一系列的服务，并且可以用于整个 job 周期。详细配置文档请查看"),s("a",{attrs:{href:"https://docs.gitlab.com/ee/ci/docker/README.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("a separate document"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"before-script-和-after-script"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#before-script-和-after-script"}},[t._v("#")]),t._v(" before_script 和 after_script")]),t._v(" "),s("p",[s("code",[t._v("before_script")]),t._v("用来定义所有 job 之前运行的命令，"),s("code",[t._v("after_script")]),t._v("用来定义所有 job 之后运行的命令。它们可以是一个数组或者是多行字符串。")]),t._v(" "),s("h3",{attrs:{id:"stages"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stages"}},[t._v("#")]),t._v(" stages")]),t._v(" "),s("p",[t._v("stages 用来定义可以被 job 调用的 stages。stages 的规范允许有灵活的多级 pipelines。")]),t._v(" "),s("p",[t._v("stages中的元素顺序决定了对应job的执行顺序：")]),t._v(" "),s("ol",[s("li",[t._v("相同 stage 的 job 可以平行执行。")]),t._v(" "),s("li",[t._v("下一个 stage 的 job 会在前一个 stage 的 job 成功后开始执行。")])]),t._v(" "),s("p",[t._v("接下仔细看看这个例子，它包含了3个 stage：")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stages")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" build\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" test\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" deploy\n")])])]),s("ol",[s("li",[t._v("首先，所有 build 的 jobs 都是并行执行的。")]),t._v(" "),s("li",[t._v("所有 build 的 jobs 执行成功后，test 的 jobs 才会开始并行执行。")]),t._v(" "),s("li",[t._v("所有 test 的 jobs 执行成功，deploy 的 jobs 才会开始并行执行。")]),t._v(" "),s("li",[t._v("所有的 deploy 的 jobs 执行成功，"),s("code",[t._v("commit")]),t._v("才会标记为"),s("code",[t._v("success")]),t._v("。")]),t._v(" "),s("li",[t._v("任何一个前置的 jobs 失败了，"),s("code",[t._v("commit")]),t._v("会标记为"),s("code",[t._v("failed")]),t._v("并且下一个 stages 的 jobs 都不会执行。")])]),t._v(" "),s("p",[t._v("这有两个特殊的例子值得一提：")]),t._v(" "),s("ol",[s("li",[t._v("如果"),s("code",[t._v(".gitlab-ci.yml")]),t._v("中没有定义stages，那么 job's stages 会默认定义为"),s("code",[t._v("build")]),t._v("，"),s("code",[t._v("test")]),t._v("和"),s("code",[t._v("deploy")]),t._v("。")]),t._v(" "),s("li",[t._v("如果一个 job 没有指定 stage，那么这个任务会分配到 test stage。")])]),t._v(" "),s("h3",{attrs:{id:"only-和-except"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#only-和-except"}},[t._v("#")]),t._v(" only 和 except")]),t._v(" "),s("p",[s("code",[t._v("only")]),t._v("和"),s("code",[t._v("except")]),t._v("是两个参数用分支策略来限制 jobs 构建：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("only")]),t._v("定义哪些分支和标签的git项目将会被job执行。")]),t._v(" "),s("li",[s("code",[t._v("except")]),t._v("定义哪些分支和标签的git项目将不会被job执行。")])]),t._v(" "),s("p",[t._v("下面是refs策略的使用规则：")]),t._v(" "),s("ul",[s("li",[t._v("only 和 except 可同时使用。如果"),s("code",[t._v("only")]),t._v("和"),s("code",[t._v("except")]),t._v("在一个 job 配置中同时存在，则以 only 为准，跳过 except(从下面示例中得出)。")]),t._v(" "),s("li",[t._v("only 和 except 可以使用正则表达式。")]),t._v(" "),s("li",[t._v("only 和 except 允许使用特殊的关键字："),s("code",[t._v("branches")]),t._v("，"),s("code",[t._v("tags")]),t._v("和"),s("code",[t._v("triggers")]),t._v("。")]),t._v(" "),s("li",[t._v("only 和 except 允许使用指定仓库地址但不是forks的仓库(查看示例3)。")])]),t._v(" "),s("p",[t._v("在下面这个例子中，job 将只会运行以"),s("code",[t._v("issue-")]),t._v("开始的refs(分支)，然而"),s("code",[t._v("except")]),t._v("中设置将被跳过。")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("job")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# use regexp")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("only")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" /^issue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("."),s("span",{pre:!0,attrs:{class:"token important"}},[t._v("*$/")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# use special keyword")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("except")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" branches\n")])])]),s("p",[t._v("在下面这个例子中，job 将只会执行有"),s("code",[t._v("tags")]),t._v("的refs，或者通过"),s("code",[t._v("API")]),t._v("触发器明确地请求构建。")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("job")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# use special keywords")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("only")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" tags\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" triggers\n")])])]),s("p",[t._v("下面这个例子将会为所有的分支执行job，但 master 分支除外。")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("job")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("only")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" branches@gitlab"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("org/gitlab"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("ce\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("except")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" master@gitlab"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("org/gitlab"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("ce\n")])])]),s("h3",{attrs:{id:"variables"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#variables"}},[t._v("#")]),t._v(" variables")]),t._v(" "),s("p",[t._v("GItLab CI 允许在"),s("code",[t._v(".gitlab-ci.yml")]),t._v("文件中添加变量，并在 job 环境中起作用。因为这些配置是存储在 git 仓库中，所以"),s("strong",[t._v("最好是存储项目的非敏感配置")]),t._v("，例如：")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("variables")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  DATABASE_URL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"postgres://postgres@postgres/my_database"')]),t._v("\n")])])]),s("p",[t._v("这些变量可以被后续的命令和脚本使用。")]),t._v(" "),s("p",[t._v("除了用户自定义的变量外，Runner 也可以定义它自己的变量。"),s("code",[t._v("CI_COMMIT_REG_NAME")]),t._v("就是一个很好的例子，它的值表示用于构建项目的分支或tag名称。除了在"),s("code",[t._v(".gitlab-ci.yml")]),t._v("中设置变量外，还有可以通过 GitLab 的界面上设置私有变量。")]),t._v(" "),s("p",[t._v("这里有更多关于"),s("a",{attrs:{href:"https://docs.gitlab.com/ce/ci/variables/README.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("variables"),s("OutboundLink")],1),t._v("的介绍。")]),t._v(" "),s("h3",{attrs:{id:"cache"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cache"}},[t._v("#")]),t._v(" cache")]),t._v(" "),s("h4",{attrs:{id:"cache-paths"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cache-paths"}},[t._v("#")]),t._v(" cache: paths")]),t._v(" "),s("p",[t._v("使用"),s("code",[t._v("paths")]),t._v("指令选择要缓存的文件或目录。也可以使用通配符。")]),t._v(" "),s("p",[t._v("如果 cache 定义在 jobs 的作用域之外，那么它就是全局缓存，所有 jobs 都可以使用该缓存。")]),t._v(" "),s("p",[t._v("缓存"),s("code",[t._v("binaries")]),t._v("和"),s("code",[t._v(".config")]),t._v("中的所有文件：")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("rspec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" test\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("paths")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" binaries/\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" .config\n")])])]),s("p",[t._v("缓存"),s("code",[t._v("git")]),t._v("中没有被跟踪的文件：")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("rspec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" test\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("untracked")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n")])])]),s("p",[t._v("缓存"),s("code",[t._v("binaries")]),t._v("下没有被"),s("code",[t._v("git")]),t._v("跟踪的文件：")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("rspec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" test\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("untracked")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("paths")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" binaries/\n")])])]),s("p",[t._v("job 中优先级高于全局的。下面这个"),s("code",[t._v("rspec")]),t._v(" job中将只会缓存"),s("code",[t._v("binaries/")]),t._v("下的文件：")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("paths")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" my/files\n\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("rspec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" test\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" rspec\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("paths")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" binaries/\n")])])]),s("p",[t._v("注意，缓存是在 jobs 之前进行共享的。如果你不同的 jobs 缓存不同的文件路径，必须设置不同的"),s("code",[t._v("cache:key")]),t._v("，否则缓存内容将被重写。缓存只是尽力而为之，所以别期望缓存会一直存在。")]),t._v(" "),s("h4",{attrs:{id:"cache-key"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cache-key"}},[t._v("#")]),t._v(" cache: key")]),t._v(" "),s("p",[s("code",[t._v("key")]),t._v("指令允许我们定义缓存的作用域(亲和性)，可以是所有 jobs 的单个缓存，也可以是每个 job，也可以是每个分支或者是任何你认为合适的地方。它也可以让你很好的调整缓存，允许你设置不同 jobs 的缓存，甚至是不同分支的缓存。")]),t._v(" "),s("p",[s("code",[t._v("cache:key")]),t._v("可以使用任何的"),s("a",{attrs:{href:"https://docs.gitlab.com/ce/ci/variables/README.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("预定义变量"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("p",[t._v("默认key是默认设置的这个项目缓存，因此默认情况下，从GitLab 9.0开始，每个 pipelines 和 jobs 中可以共享一切。")]),t._v(" "),s("p",[t._v("配置示例")]),t._v(" "),s("p",[t._v("缓存每个job：")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$CI_JOB_NAME"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("untracked")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n")])])]),s("p",[t._v("缓存每个分支：")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$CI_COMMIT_REF_NAME"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("untracked")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n")])])]),s("p",[t._v("缓存每个 job 且每个分支：")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$CI_JOB_NAME/$CI_COMMIT_REF_NAME"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("untracked")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n")])])]),s("p",[t._v("缓存每个分支且每个stage：")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$CI_JOB_STAGE/$CI_COMMIT_REF_NAME"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("untracked")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n")])])]),s("p",[t._v("如果使用的Windows Batch(windows批处理)来跑脚本需要用%替代$：")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%CI_JOB_STAGE%/%CI_COMMIT_REF_NAME%"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("untracked")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n")])])]),s("h3",{attrs:{id:"allow-failure"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#allow-failure"}},[t._v("#")]),t._v(" allow_failure")]),t._v(" "),s("p",[s("code",[t._v("allow_failure")]),t._v("可以用于当你想设置一个 job 失败的之后并不影响后续的CI组件的时候。失败的 jobs 不会影响到"),s("code",[t._v("commit")]),t._v("状态。")]),t._v(" "),s("p",[t._v('当开启了允许 job 失败，所有的 intents 和 purposes 里的 pipeline 都是成功/绿色，但是也会有一个"'),s("code",[t._v("CI build passed with warnings")]),t._v('"信息显示在'),s("code",[t._v("Merge Request")]),t._v("或"),s("code",[t._v("commit")]),t._v("或"),s("code",[t._v("job page")]),t._v("。这被允许失败的作业使用，但是如果失败表示其他地方应采取其他（手动）步骤。")]),t._v(" "),s("p",[t._v("下面的这个例子中，job1和job2将会并列进行，如果job1失败了，它也不会影响进行中的下一个 stage，因为这里有设置了"),s("code",[t._v("allow_failure: true")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("job1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" test\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" execute_script_that_will_fail\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("allow_failure")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("job2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" test\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" execute_script_that_will_succeed\n\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("job3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" deploy\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" deploy_to_staging\n")])])]),s("h3",{attrs:{id:"when"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#when"}},[t._v("#")]),t._v(" when")]),t._v(" "),s("p",[s("code",[t._v("when")]),t._v("用于实现在发生故障或尽管失败时运行的作业。when可以设置以下值：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("on_success")]),t._v(" - 只有前面 stages 的所有工作成功时才执行。这是默认值。")]),t._v(" "),s("li",[s("code",[t._v("on_failure")]),t._v(" - 当前面 stages 中任意一个jobs失败后执行。")]),t._v(" "),s("li",[s("code",[t._v("always")]),t._v(" - 无论前面 stages 中 jobs 状态如何都执行。")]),t._v(" "),s("li",[s("code",[t._v("manual")]),t._v(" - 手动执行(GitLab8.10增加)。更多请查看手动操作。")])]),t._v(" "),s("h3",{attrs:{id:"artifacts"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#artifacts"}},[t._v("#")]),t._v(" artifacts")]),t._v(" "),s("p",[s("code",[t._v("artifacts")]),t._v("用于指定成功后应附加到 job 的文件和目录的列表。只能使用项目工作间内的文件或目录路径。在job成功完成后artifacts将会发送到GitLab中，同时也会在 GitLab UI 中提供下载。如果想要在不通的 job 之间传递"),s("code",[t._v("artifacts")]),t._v("，请查阅"),s("a",{attrs:{href:"https://docs.gitlab.com/ce/ci/yaml/README.html#dependencies",target:"_blank",rel:"noopener noreferrer"}},[t._v("依赖关系"),s("OutboundLink")],1),t._v("。以下是一些例子：")]),t._v(" "),s("p",[t._v("发送"),s("code",[t._v("binaries")]),t._v("和"),s("code",[t._v(".config")]),t._v("中的所有文件：")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("artifacts")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("paths")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" binaries/\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" .config\n")])])]),s("p",[t._v("发送所有没有被Git跟踪的文件：")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("artifacts")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("untracked")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n")])])]),s("p",[t._v("发送没有被Git跟踪和"),s("code",[t._v("binaries")]),t._v("中的所有文件：")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("artifacts")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("untracked")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("paths")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" binaries/\n")])])]),s("h2",{attrs:{id:"五、其他相关内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、其他相关内容"}},[t._v("#")]),t._v(" 五、其他相关内容")]),t._v(" "),s("h3",{attrs:{id:"_1-api触发器-triggers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-api触发器-triggers"}},[t._v("#")]),t._v(" 1 API触发器 Triggers")]),t._v(" "),s("p",[t._v("Triggers 可用于强制使用API调用重建特定分支，"),s("code",[t._v("tag")]),t._v("或"),s("code",[t._v("commits")]),t._v("。API的使用示例可以在"),s("code",[t._v("Settings")]),t._v(" -> "),s("code",[t._v("CI/CD")]),t._v(" -> "),s("code",[t._v("Pipeline triggers")]),t._v("中找到。")]),t._v(" "),s("p",[t._v("在"),s("code",[t._v("triggers")]),t._v("文档中"),s("a",{attrs:{href:"https://docs.gitlab.com/ce/ci/triggers/README.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("查看更多"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"_2-配置定时任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-配置定时任务"}},[t._v("#")]),t._v(" 2 配置定时任务")]),t._v(" "),s("p",[t._v("GitLab CI 中可以在 GitLab "),s("code",[t._v("Settings")]),t._v(" -> "),s("code",[t._v("CI/CD")]),t._v(" -> "),s("code",[t._v("Schedules")]),t._v("中配置定时任务，点击"),s("code",[t._v("New Schedule")]),t._v("按钮，可以配置你流水线的定时执行任务，包括：描述信息、定时的Cron表达式、目标分支、变量等信息。")]),t._v(" "),s("p",[t._v("然后在需要定时执行的作业的"),s("code",[t._v("only")]),t._v("分支写上"),s("code",[t._v("schedules")]),t._v("即可。")]),t._v(" "),s("h3",{attrs:{id:"_3-校验-gitlab-ci-yml"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-校验-gitlab-ci-yml"}},[t._v("#")]),t._v(" 3 校验 .gitlab-ci.yml")]),t._v(" "),s("p",[t._v("GitLab CI 的每个实例都有一个名为"),s("code",[t._v("Lint")]),t._v("的嵌入式调试工具。 你可以在 GitLab 实例的"),s("code",[t._v("-/ci/lint")]),t._v("下找到该链接。")]),t._v(" "),s("h3",{attrs:{id:"_4-配置邮件发送"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-配置邮件发送"}},[t._v("#")]),t._v(" 4 配置邮件发送")]),t._v(" "),s("p",[t._v("如果希望在每次构建完成后（或者在仅构建失败的情况下），想邮件发送给相关开发人员，则可以在 GitLab "),s("code",[t._v("Settings")]),t._v(" -> "),s("code",[t._v("Integrations")]),t._v(" 中找到"),s("code",[t._v("Pipelines emails")]),t._v("，点击进去就可以配置邮件发送相关的内容了。")]),t._v(" "),s("h3",{attrs:{id:"_5-gitlab-pages"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-gitlab-pages"}},[t._v("#")]),t._v(" 5 GitLab Pages")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://gitlab.com/pages/",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitLab Pages"),s("OutboundLink")],1),t._v("是用于托管静态文件的服务。而"),s("code",[t._v("pages")]),t._v("是一个特殊的job，用于将静态的内容上传到GitLab，可用于为您的网站提供服务。它有特殊的语法，因此必须满足以下两个要求：")]),t._v(" "),s("ul",[s("li",[t._v("任何静态内容必须放在"),s("code",[t._v("public/")]),t._v("目录下")]),t._v(" "),s("li",[t._v("artifacts必须定义在"),s("code",[t._v("public/")]),t._v("目录下")])]),t._v(" "),s("p",[t._v("下面的这个例子是将所有文件从项目根目录移动到"),s("code",[t._v("public/")]),t._v("目录。"),s("code",[t._v(".public")]),t._v("工作流是"),s("code",[t._v("cp")]),t._v("，并且它不会循环复制"),s("code",[t._v("public/")]),t._v("本身。")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("pages")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" deploy\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" mkdir .public\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" cp "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("r * .public\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" mv .public public\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("artifacts")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("paths")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" public\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("only")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" master\n")])])]),s("p",[t._v("更多内容请查看"),s("a",{attrs:{href:"https://docs.gitlab.com/ce/user/project/pages/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitLab Pages用户文档"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"_6-跳过-jobs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-跳过-jobs"}},[t._v("#")]),t._v(" 6 跳过 jobs")]),t._v(" "),s("p",[t._v("如果你的"),s("code",[t._v("commit")]),t._v("信息中包含"),s("code",[t._v("[ci skip]")]),t._v("或者"),s("code",[t._v("[skip ci]")]),t._v("，不论大小写，那么这个"),s("code",[t._v("commit")]),t._v("将会创建但是 jobs 也会跳过。")]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"参考文档"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[t._v("#")]),t._v(" 参考文档")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://docs.gitlab.com/ce/ci/yaml/README.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档地址"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://segmentfault.com/a/1190000010442764#articleHeader24",target:"_blank",rel:"noopener noreferrer"}},[t._v("segmentfault yaml配置中文翻译"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=n.exports}}]);